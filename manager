#!/usr/bin/env python2
##
# The-Password-Manager
# https://github.com/roothaxor
# copyright (c) 2014 RooT HaXor
##
import os, sys, getpass, time
import subprocess, base64
from __files import info, author, version
from random import choice
from string import ascii_lowercase, digits, ascii_uppercase
import clipboard

she = 'Vm0weGQxTXdNVWhTV0doWVYwZDRWVmxyV25kalJsWnpXa2M1VmxKc2JETlpWVlpQVjJ4YWMySkVUbGROYWxaeVdWUkJlRmRHVm5WalJuQlhWakZKZWxkV1dsWmxSazVYVm01T1dHSklRbTlaVkVKWFRrWmFXR1JIUm10aVZscFpWbTEwVjFaSFNrbFJhemxWVm5wV1VGUnJXbXRqTVd0NllVWmtUbFl4U2xsV2JHTXhVakZXZEZOc1dsaGlSMmhvVm1wT1UxUkdVbGhsUmxwc1ZqQTFSMXBGV2xkVWJVWTJVbFJHVjJFeVVqTldha1pyWTJzeFNWcEdVbWhOV0VKWlZtMHdlRlJyTVZkV2FscFRZbXMxY1ZadGVFdGxWbEp6V2tSQ1YwMUVSa1pWYkZKTFYwWlplbFZ1V21GU1JYQkhXbFZhVDFkWFJrZGhSMmhvVFVoQ1YxWnJXbGRXYXpGWVZHNU9hbEpXY0doVmJHaERZekZhZEdWSFJrNVNia0pYVm0wMWExWnJNVlppUkZaWFVqTkNWRlpxUmt0V01XUnpWV3hrVTAwd05EQldWekI0VkRGS1YxZHVVbWhTVkZaVVZXMTRkMUl4V25GVGJtUlVUVVJXUjFSV2FFOWhSVEI2VVcwNVlWWXpVbWhaZWtaell6RmtkRkpzYUdsU2JrSktWMVJDVjFReFpITlhiazVwWld0d1YxWnVjRmRoUmxweVdrVmthbUY2VmxoV1YzaDNWR3hKZUZOc1ZsZFdSVXB5Vm1wR1QxTkdXbkpYYlhCVFlYcFdkbGRzWkRSWlZrNVhWMjVPV0dKRk5WUlVWbHB6VGtaYWMyRkhPVmRTTUhCSVZUSjRUMWR0UlhsVmJGSlhWa1ZhYUZwRlpGZFRSa3B6Vm0xc1UySnJTVEZXYlhSclRVWk5lVkpZYUZSaVIyaHpWV3hrVTJGR1duTlhiVVpvVW14d2VGVXlkR0ZpUmtwMFZXNXNWV0pHY0ZSV2FrWmhZMjFPU0dGR1pFNWlhMHBKVmxjd2VGVnRWbGRYYmtwWVlrZG9jRlZzYUVOWFZtUlhWV3M1VWsxVmNFaFdNalZMV1ZaS1JsTnNXbFZXYkZveldsWmFjbVF4Vm5OYVIyaFRWa1ZhUjFadE1UQldNV1JJVW01S2FXVnJTbFpXYWs1dlpXeFNkR1ZGT1ZkV2EzQXdXV3RhYTFSc1NYcFpNMnhYWWxoU2NWcFZWWGhUUmtwellVWlNhVkl4U25oV1ZFSnJWVEZzVjJKR2FHdFRSMUpZVlcwMVExZFdVbGRXYWtKb1RWVndNRlpYY0VkV01ERnhVbXBPVjFKNlJreFZiVEZQVWxaU2MyRkdaR3hoTUd0M1ZtcEdZV0V4VlhsVmEyUldZa2Q0Y0ZWcVNqUldWbFowWlVoa1ZWSnNjRmxhUlZwUFZXc3hjbU5JY0ZkU2VsWllXVlphU21Wc1JuVlJiSEJvVFd4S01sWlVSbUZWTWs1elYyeFdVMkpGTlZSWmJGSnlUVlprY2xadE9XcE5WbkJZVlRJMVMxUnNXa1pPVjJoV1lrWndZVlJWV21GamJGcFpZVVpTVjJKR2NEVldSbHBoV1ZkS1NGSllaR2xTUlRWWVdWUkdZV0ZHV2toTlZrcHNWbXhhZVZZeU1UUlZNa3BHWTBaQ1YxWkZTbWhWZWtaVFl6RmtjMkpIY0ZOV1ZGWlFWbGN4TkZNeFRrZFhhMlJvVWpOU2IxUldWbmRYYkd4V1YyeGtWMVpzY0ZsWlZWcFRWakZLYzJOR2FGVmlXR2hJV1RGYVIyTXhXbk5VYldoc1lURlpNbFpxU2pCV01WbDNUbFZrV0dFeGNFOVdiR1EwVmpGc1dXTkZaRmROV0VKWldrVldkMkV3TVZkalJXUlhUVzVOZUZsVVFYaGpNVTV5V2tkR1YxWnVRbFZXYTJRMFZERkplRlJ1U2s5V2JWSlpWVEJXUzFKV1drZFdiVVpXVFZWc05GWlhlSE5aVmtsNlZXeFNWMDFIVW5aV2JYaGhVakZhZEU5V1drNVdhM0JaVm0weGQxbFdWblJTYmtwVVlrWndWMWxzYUU5T1JsSlZVbTVrVTJKR2NIaFdWM2hyVlRGYVJsZHJkRmRpUjFJMldsVmFZV1JHV25WVGJGSllVakZLV1ZaWGVHRmtNVkY0WTBWV1ZHSkZOVlJaYkZwTFVteGFTR042UmxaTlYxSklWVEowWVZZeVNrZGpTRXBWVmxkU1RGbDZSbE5qTVdSelZtMW9UbE5GU2pSV2JURTBZakZWZVZWWWFHbFRSVnBXV1ZSS1UxWnNWbkZSYlVaWFRWWldOVnBWV210WFJrbDNZMFZzVjFZemFFUlhWbHBoWXpKT1JWUnNaRTVXYmtKWlZtcENZV1F4VGtoVGEyUmhVbFJXVkZsc2FHdE9iRnAwWTBWMFQxSXdiRFJXUm1oelZsZEZlVlZ1UWxaaVZFWjJXVEo0VTFkRk1WZFViRlpwVW01Q1YxWldaREJOUmxwWVUydG9WbUp1UW1GV2JHUlRVMFpzVjFkcmNHdE5helZIVm0xNFlWWXlTa1pqUlRGWFZrVnZNRlY2Um1GamF6VlhZa2R3VTJKWGFIZFdWM0JIVXpGT1YxcElUbGhpVlZweFZGWmtVMUl4VW5OWGJUbG9Za1ZzTTFZeWVHdFdWbHBYVjIxb1ZXRXhjRmhVYlhoUFpGWlNkR1JIYkZkV1JscFpWakowVjJGck1WZFZiazVVWWtkNFYxbFVSbUZYUmxweVZtdDBWRkp0ZURCYVZWcHJZV3N4Y2xkclpGaGhNVlY0Vm1wQmVGSXlUa2hTYkdSb1lUSjNNRmRYY0V0U01WbDRWR3hzYUZKdGFHOVpWRVozWWpGYVdHVkdXazVXYTNCSVZsZDRZVmxXU2xsVmJFSlhZbGhTYUZwWGVGcGxWMVpJVW0xc1UySklRbGhYVkVKWFlURlplVkpZYUZSaE1VcFlWbXBPYjAxc2NGWmFSVnBzWWxWd1NWcFZXazlVYlVwWVlVUlNWMkV4Y0ZSVlYzTjRWMFpXV1dGSFJsUlNhM0JRVm1wQ1ZrMVhTWGhpU0VwaFVrWktXVmxyV25kWFZsSnpWbXM1YUZKc2NGWlZiVFZ2VmpGYU5sRllhRmRpVkVaTVZqRmFVMVpXU25OYVIyeFlVakpvVmxaclpEUlpWa2w0V2taa1YySnJjSEZWYlhNeFYwWnNkR1JGWkU5V2JHdzBWbGQwTUdGck1WWldhbEpYWWxoU2NsbFhlRTlTTVU1ellrWndhVmRHU2sxV01WcGhWVEZrUmsxV1ZsWmlWM2hQVm1wT2IwNVdXbkphUkVKVlRWWnNOVlV5ZUdGVWJGcEhWMnhvV21FeVVsUlpNbmhoWXpGYVdXRkhjRmRpU0VGNFYxUkNhMUl4V1hsU1dHaFlWMGhDV0ZZd2FFTlNSbHBGVW0xR1ZGSnNTbHBaTUZwaFlVZFdjbGRzYUZoaVIxRjNWVEl4VW1WR1pISlhiR2hvWld4YWVWWkdaRFJUTVVsNFkwWmFXR0pGTlZaWmExVXhVMFpWZVdONlJsZE5WMUpLVlZkMFUxWldXbGRqUmxKV1lXdGFWRll4V25kVFIxSkhWR3hvVTAxdGFGaFdiWFJoVmpKSmVGWllhRlppUjFKWVdWZDRkMVV4YkZoa1JYUlhZa1phTUZsNlRtOVVhekZaVVd0a1YySllRbFJXYWtaTFZsWktjbU5HWkZkTk1EUXdWbTB3ZUZZeVRuTlViR3hoVW0xU1ZGWnROVU5WUm1SeVZXdDBWazFWY0RCV2JYUnJWbTFHTmxac1ZsWmlXRkl6VmtSR1lXTXlSa2xhUmtwT1VrVmFTVlpzWkRCaE1WcFhXa1ZvVm1KcmNGZFphMlJ2Wkd4YWMxZHNUbGRpVlZwSVZrZDRWMVl5U2tkaE0yeFhWbTFTTTFWVVJtRldNVTUxVTJzMVYxSlVWbTlXVjNoaFYyc3hSMWR1U2xkWFIyaFZWbTE0WVdWV1VsZFhiVVpwVWpCV00xbHJVazlXTWtWNFYyMW9WMUo2UmxOYVZscFhZMnhrZEdWR1RtbFNXRUpSVm14U1ExbFdUWGhWYms1WVlrZDRjVlZzVlRGak1WcDBaRWhrVkZKc1dqQlViR1JIVmpGSmQyTkZiRnBXVmxwNlZteGtTMUl4WkhKbFJuQlhZa2hDVEZkc1pEUmtNVTVHVGxaa2FsSnRVbkJXYkZKR1RVWlplRnBFVW1oTlZUVXdWbTAxVDFaWFNuTlhiR1JhWVRKb1JGWXhXbGRrUjFKSldrVTFUbFl4U2xwWFZFSlhaREZTYzFOdVVsQldSbHBYV1d4b2IyUnNXa1ZTYlhSVVZtdGFNRlF4V210aFIwVjRZMFV4V0ZkSVFraFdSRVpoWkVaS2NscEdWbWxXTTJoUVYxWlNSMlF4YkZkWGJrcFlZbGhTYjFSWGRHRmxiRnBJWkVkR2FHSkZjRWRaTUZwelYyeFplbFJZYUZkU1ZuQjZWbTE0ZDFKdFVrZGFSazVvVFZjNU5GWXhaREJoTVVsNFdrVmtWR0pIVW5CVmExcExWMVphZEdWSVpHdGlSbGt5VlRKME1GWkdTbk5UYm1oWFlsaG9URmxXWkV0V01VNTFZVVpvVjAweWFGVlhWRWw0VlcxV1IyTkZiRlZpVlZwVVZtdGtORlZHV2xoalJVNWFWbTFTV0ZaV2FHOWhSa3AwVld4V1dtRXhXakpVVjNoelkyMUdSMVJzWkZOaVNFSmFWbXhrTkZFeGJGZFRhbHBUWVROb2FGVnNXbmRqYkhCSFYydGthMUpyY0hwV1IzTXhWakpLVldGNlFsZGhhMjkzVm1wS1JtVldVbGxpUms1b1RXMW9WbGRXVWt0aU1rNUhWbTVLVjJFelVuRlVWbHAzVjJ4cmQxZHJPV2hXTUhCSFZHeGFhMVl4U1hwVmEzaFlWbXhXTkZVd1pGZFNiRnB6VjJ4a2FWWnJjRFZXYkZKTFRrWktkRlZZYUZSaWJFcFFWbTE0ZDFkR2JITlhhM1JXVm0xU1dGZHJVbE5oTURGWVZXeG9WMVo2VmxoWlYzaExWMVpHYzFWc1ZsZGxiRm94Vmtaa05GWnRWa2RYYmxKUVZteEtUMWxVVGtOVGJGcHlWMjA1YTAxV2NEQlZNalZUWWtaS05tSkdhRnBXTTFKSFdrUkdkMUpXU25Sa1IzQk9WMFZLU1ZaVVNYaFNNVkp6VjFod1lVMHlhRmxXYlhoTFZFWnNWVk5yWkZkTlZUVmFWMnRhYjFkR1RrWlRiRnBYWWxob2NsWkhjM2hXTWs1SFdrWmthV0Y2VmxaV2JURjZUVlV4UjJOR1dtRlNWMUpXV1Zod1IxZEdhM2RWYlVaWFRVUkdXRmt3YUdGV01WcEdZMFpDVmsxR2NGQldNV1JMVW1zNVYxUnJOV2xTV0VFeFZtMTRhazFYVVhsVFdHeFVZbXMxYjFSVVNsTmhSbFp6V2taT2FrMVdjSGhWYlhRd1ZrWmFkR1ZJYkZoaE1taHlXVlZWZUZZeVNrVlhiSEJYVmpBd2VGWnFTbnBsUjFKSVZtdGFWbUpJUW5CV2ExWmhWVlprY2xac1drOVdiSEJZVlRJMVUyRnNTbk5UYkZKWFlURmFhRlJXV2xwbFJuQkpXa1pTVGxZeFNqWlhWM0JQWXpGYVdGSlliR2hTYldoaFdXeG9iMDB4YTNoWGJHUnFWbXhLTUZReFpIZFViRnB5WTBWb1YyRXlVWGRWZWtaelZtc3hWbUZIZUZOV2JIQllWbTB3ZUZVeVRuTldXR3hzVWxad2NsUldWbmROUmxKelYyeE9WMDFXY0ZaV2JYUlRWakF4ZFZGclVscGxhMXBNV1RKemVGWXlTa2RUYld4WVVsVndVVll4WkRSaE1rbDVWVzVPWVZKdGFFOVZNR1J2VmpGU1dHTXphRTlXYkZvd1dsVmpOVlpWTVZkaWVrcFhZbGhSZDFadE1VZGpiRXBaWVVad2FHRXhjRFpYYTFaclV6RktjMVZ1VW1wU2F6VlBWVEJXUjAweFduUmtSM1JyVFZWc05WVnROVk5WTWtwSFkwWldXbUpZVW1oWFZscFRWMGRPUmxwSGVHbFRSVXBJVmpKMFYyRXhaRWRUYkZaWFlrZDRZVlpzWkZObGJGcFlZek5vVTJKVmJEWlpNRnByVkcxS2RHRklhRmRTYkhCeVZXcEdUMUl4VW5WVGJXeFRZa2hDZDFkV1VrTmtNa2w0VjI1R1VtSkdjSE5WYWtKM1pXeGtjbGR0ZEZoaVZscDVWakl3TlZaV1dsaFZWRUpXVFZad00xWnRNVWRUUmtwMFlVZG9iR0V3YkRaV2ExcGhZV3N4VjFwSVVsTmlhM0J4VldwQ1lWZFdiRmhrU0dSV1VtNUNSMVl5TVVkaE1WbDNUbFZzV2sxR2NGQldSM2hoWkZaR2NWVnNaRTVpYkVwWlZqRmFWazFXVGtkV2JrNVlZa1p3Y0ZWc2FFTmtNVnBIVm0wNVVrMVdTa2haTUZwcldWWktWV0pJU2xkaVdGSXpWVEJhVjJSRk5WaFNiR1JUVFVoQ1dGWkhlRmRrTVZweVRWaEdWMkV4U21GV2JURlRWRVpzTmxKcmRHdFNWRlpZV1RCa2IyRkhWbk5YYkVwWFRXNVNhRmRXWkZKbFZsWnlWMnhDVjJKWWFIaFdWM0JEV1ZaYVIyTkdhR3hTTUZwUFZXMHhVMWRHV1hsTldHUlZUVlpzTTFadGNGZFdNVXAwWVVod1YxSkZXbWhVYlhoTFpGWkdjMVpzWkZOV1Zsa3dWakZTUzA1SFRYaFhXR2hwVWtad1ZGbHNaRFJYUmxKV1drUk9UbUpHY0hsWFdIQkhWV3N4Y2xkc2FGcE5Sa3BvVmxjeFJtVnRSa2RVYkZaWFlsWktNbFp0ZEdGa01WbDRZMFZrWVZKdFVsaFVWV1F6Wld4YVNHVkdaRlpOVjNoWFZGWm9WMVp0UlhwaFJteFhZVEZhVEZwSGVGZE9iRTV5VDFaU1UyRjZWWGhXYlRFMFdWWlpkMDFZVGxSaE0yaFpWbTE0ZDJSc1drVlJXR2hUVFZaYWVWZHJXbGRYUmtsNFUyNXNWMVl6YUhaWmFrWmhWakZXYzFkdGFGTmhlbFpYVm0weE5GZHJNWE5XYkdocVVsVTFXRlp0ZEhkbFZsSlhWV3M1V2xacmNGaFdNVkpEVmpKRmVGWnFVbFpOVm5CWVdUSnplRll4WkhSbFIyaE9Vak5rTmxadGVHOWtNVkY1VkZob1ZXSnJOVmRaYlhSM1ZteHNjMVZzWkdsTlZrcFhXVlZXVDJGc1duTldhazVYWWxSV2NsbFVRWGhYUjFaRlVXeFdhVkp1UWsxV01WcFdaVVpPU0ZacmJHRlNiSEJZVkZSR1MySXhaRmRYYlhSVVRXc3hORlpITlZkV1YwcEpVV3M1V21KSGFIWlZiRnBoWTFaT1dXRkdVbWxXYkhBMlZtcEpNVll5UmxkVGJHeFNZa1pLWVZaclZrdE5NWEJJWlVkMFdGWXdOVWRVTVZwWFZHeEtSbE5VUmxkV1JWcDJXa1JHWVZOR1RuTmlSbHBvVFRGS1dGWnRkRmRUTWxaelYydFdVMkV4Y0hOV2JUVkRVMnhWZVdWR1RtaFdiSEJXVm0xME1GWXhXa1poTTJoV1ZrVndTRll3V2s5a1ZsSnpWRzFzVjFKc2NGZFdiVEYzVXpBMVJrNVlUbXBTVm5CWVdWZDRTMWRHVm5OVmEyUlVZa1p3V1ZsNlRtOVdNa3BYVjI1c1ZrMVhhSEpXYWtaTFZqSk9SazlYUmxOU1dFSlZWbGN3ZUZZeFNYaFdia3BQVm14S1ZGbFVUa05WUmxwMFpVYzVhMDFWVmpOVVZsWnJWbTFGZVZWc1dsZE5SMUpVV1RKNFYyTXlSa2RUYXpWWFlrWlpNRlp0ZUZOU01WVjRVMjVTVUZaR1dtaFZiRnBhWkRGWmQxZHRSbXRTYkZwNlZsZDRkMVl4V25WUldIQllZVEZhYUZWNlNsTlRSbEp5WVVkNFUwMXVhSGRXYlhCTFlqQTFSMWRZYkd0U00wSnpWVzE0UjA1V1ZuUmtSM1JvWWtWd1dWbFZXbk5YYlVwSVZXNWFXazFXY0ZSV01HUlhVbTFTU0dKRk5WZE5NazQxVm14U1MwNUdVWGxTYTJSVVYwZFNVRlZyVm1GV01WcDBaVVYwYkdKR1ZqVmFWVlozWWtaYWMxZHFSbGRTZWtaSVZsUkdXbVZYUmtaV2JHaFhZa1p3ZVZaclkzaFdNazE0Vm01T2FWSnRVbkJXYkZwM1ZVWmtXR1JIUm1wTlJFSTBWMnRhVjFWdFNsbFZiRkpWVmpOb2FGUlZXbUZUUjA1SFdrWndWMVpGV2pSV2JURXdUVVpzVjFkdVRsaGhNbWhvVlcxNGQxUXhjRlpYYTNSWVZtNUNTRlpYY3pGVk1WcEhWMjFHVjJKVVFqUmFSRVpXWlVad1NWTnJOVmhTVkZaYVYxWmtlazFYUmtkV2JrNVhWa1ZhVkZWdGVIZFNNVmw1VGxkMFdGSnNiRE5aTUZaelYyMUZlVlZ1Y0ZkU2VrWkhXbFZrUzA1c1NuTmFSVFZwWWtWd1dsWXhhSGRUTVZWNFdrVmtWMkpyY0c5VmJURlRZMFpzYzJGSE9XeFNiVkpaVkZaU1UxZHNXbFZSYWxKYVRVWmFhRlp0TVV0ak1rNUhWMnh3VjFKVlZqUlhhMXBoWXpGYVYxSnVWbUZTTW1oWVZtdFdTbVZzV2tkWGJFNVRUVmRTTUZadE5VdFVNV1JKVVcxb1YySnVRa2hXYTFwV1pERmtkRkp0ZEZkaVJuQTFWMnhXWVZNeFVuUlRhMXBxVWtaS1dGUldaRkprTVd4eFVteE9hMUpyTlRGVk1qRXdWVEpGZWxGc1FsZFdNMmgyVmxSR1MxWXhaSE5hUjBaVFVtdHdVRlpHV210TlJUVlhWV3hrYUZKVWJHOVVWbHB6VGtaVmVXUkdaRmRpUm5Bd1ZsYzFkMVl3TVZkalJYaFZZbGhvYUZwRlpFOVNNazVJWWtaa1RrMXRhRWRXYlhoaFlXMVdSMU5ZYUZWaE1sSndWRlJLTkdJeFZuTmhSVTVYVW0xNFdsa3dXbXRpUjBwSFlrUldZVlpYVWpOWmExcEtaVVprZFdKR2NHaE5WbkF5VjFkMFlWUXhTbk5VYmxKUVZteGFXRlJVU205WFZtUllUVlJTYWsxRVZucFdSM2hYVmpKS1dWVnNVbHBpV0ZKTVZqSjRZVkpXU25SUFZtUk9Wak5vV1ZadGVHOWhNVnBJVTI1T1ZHSlZXbUZXYWs1T1pVWmFSbGR1VG10U1ZFWlhXVEJrTkdGV1NuTmpSbkJYVFc1U2NsUlZXbFprTURGWlZXMW9WRk5GU2xoV1JscGhXVmRTYzFac1ZsUmhNbEpWVlcxNFMxZHNhM2RYYkdSb1VqQlpNbFp0Tld0V01VcHpVMnRTWVZKRmNGQlpla1pUWXpGd1IxWnRhRTVTUmxvelZteGtkMUV4YkZkVGJHUldZbXR3YjFWdE1WTldWbXh5WVVWS1RtSkdXbGxhUlZKVFZtMUdObEpzYkZkV2VsWXpWbXhhWVZZeVRrVlViR1JPVm01Q1VWZHJWbXRVTVU1SVUydGFUMVpVVmxoWmJGSnlUVVphY1ZOcVFsZE5Wa1kwVlcwMVMxVkdXbk5qU0VKV1lrWndhRlpyV21Gak1WWnpXa1pPVjJKV1NqUldWRXAzVkRKS1NGTnJhR3hTYlZKWldWUktiMVZHYkZoak0yaFlWbXRhZWxadGVHRldNbFp5VjJwS1YwMVdjR2hWTWpGU1pVWndTVlpzV21sU01taFpWMWQ0WVZNeFZsZFhhMmhPVTBkb1dGUldWVEZUUmxwWVRsVmtWMUl3Y0VwVlYzTTFWMnhhUmxkcVRtRldiSEJoV2xaVmVGTlhSa2RVYXpWcFVtNUJNbFl4VWtOV01rbDRWbGhzVkdKc1dsTlpiR1J2VmpGc1dHUkZkR2hTYkVvd1dsVlZOVll5U2tkVGJteFhUVzVvUkZacVJscGxiVVpHWTBaa1YyVnJXWHBXVjNCTFVtMVdSMVJzYkdsU01taFVWV3hvUTJGR1drZFpNMmhzWWxaYVNGbFVUbXRaVmtwWlVXNU9WMkpHU2xoV01WcFRWakZ3UmxwR1pGTmhNMEpYVm0xNGIySXhXWGROV0VaU1lXeEtXRlpyVm5kVlJsVjNWMnhPV0ZZd2NFZFVNVnByVkdzeFJtTklXbGRpUmtwRVZtMXplRmRHVW5OYVIyeFVVbXR3VVZadGVGTmpNazV6WWtac2FsTkZOWEpXYlhoTFZqRmFkR05GVGxaTlZYQjZWako0YzFsV1dsaGhTRXBZVm14d1RGWXdXbGRqTWtaSVVteGthVk5GU1RGV01uaGhWbXMxVjFkc1pGUmliRXB3VldwS05HTkdWbk5YYm1ST1ZteHdXbGt3VlRWaE1rcFhVbXBTV21Gck5YSldSM2hoWTIxT1JrOVdXbWxTTW1oVlZsZDRZVmxXV1hoalJWWldZbGhTVDFacVJrcGtNV1JZWkVaa1ZVMXJXbnBWTVdodlZrZEZlV1ZHYUZwaVJrcFlXbGQ0V21WWFRYcGhSM0JYVFVaWk1sZFdWbUZrTWtaWFYydGtXR0pHU2xoVVZ6VkRVMFpXVlZKdFJsZGhla1pYV1ZWa1IxVXhXa2RYYmxwWVZqTm9WRmw2UmxkU01WcHpWbXhTYVZkR1NuaFhWM1JXVFZkV1YxZHJhR3hTZW14WFZXMHhVMU5zVmxoamVrWllZbFZ3V2xaR2FHdFdWbHB6WTBod1ZXSllhRlJaZWtaVFpFZEtSMVJyTlZSU1ZYQllWbTF3UzJReFRuSk5WbVJoVTBWd1QxWXdXbUZpTVZaeVYyNWtWMVp0ZURCVVZsSlRZa1phYzJORmJHRlNWbFV4V1Zaa1MxWnNXbkZVYkhCT1VteHdWVlpxUW1GVE1WcDBVMnBhVTJKSGFGaFphMmhEWlVaYVIxZHNXbXhTYTNBd1ZUSjBZVlp0U2tkVGJrSlhZa1pLV0ZwRVJtdFhSMUpJVDFkc1RsSkZXbGxXTW5SWFdWWmtkRlp1U2xoaVZWcGhWbXRWTVZWR1VuSlhiRTVYWWtoQ1NWcEZXbUZVYkZwMFQwaHNWMkpZYUhaWlZFWnJVMFpPY21GSGFGTlhSMmhvVmtaV2ExVXhVa2RqUlZwWVltdHdjMVp0TlVOVFZsWjBaVVU1VldKRmNEQmFSRTUzVmpKR2NsZHRhRnBXUlZwUFdsWmFTMk50UmtkV2JHaFRUVEpvV2xadE1YZFRNVlY0Vmxob1dGZEhVbGxaVkU1RFkyeFNWMXBHVG14aVIxSldWa2N3TldGRk1VVlNibkJXVFc1U1dGWnRlR0ZPYkZwellVWndWMkpXU2xsV2JYaGhWakpTUms1V1pGZGlSMUpQV1cweGIxSnNXbkZTYlhST1VqRmFNRlp0ZEdGVWJGcDBZVVphV21KSFVUQlpha1poWXpGd1JWVnNXbE5pUm5CWFZsUkplRTFIUm5SVGExcFBWMGhDWVZSVlduZGtiR3h5VjJzNVUySkZOVEJaVlZwM1ZqSktSMk5GTVZoaE1VcElXa1JHUzJNeVRrWmFSMFpUVFRKb1dWZFhlRzlWYXpGWFYydFdVMkpGTlZSVVYzUmhWMVpWZVU1Vk9WWk5hM0JXVm0xNGExWnRTbGxoUldoVlZrVmFjbGt4V2tkWFYwWkdUMWRzVjFZelpEWldhMlEwVmpGVmVHSkdXazVYUmxwWFdWUk9iMVl4V25KV2JVWnFWbXhLZWxkcldtdGhiVXBYVjJ0d1YySllhRmhaVldSTFVqSk9TV0ZHWkZOaVJYQkpWbGh3UzFSdFZraFRhMnhWWWtaYWNGWnJXbUZrTVdSWVpFZDBUbEpVVmxoWk1GcGhZVVpPU0ZWc1ZsVldNMmhvVmpGYWQxSnNXbFZXYkZwb1pXdFpkMVpzWXpGak1WcHlUVmhXVm1KRlNsaFVWbHAzVTBad1IxcEZkRlJTTUZwSVYydGtOR0ZXU25OaVJGcFhZa1pLU0ZacVJsSmxSbEpaWVVkb1RrMXVhRlpYVnpGNlRWZE5lRlpZWkZoaVZWcFpXV3RhWVUxV2EzZFhiWFJvVW14d2VWUnJVa3RXYlVwSVlVaEtXRlpzVmpSV2JYaHJZekpPUjFwR1pFNU5SWEJHVm1wR1lWbFdiRlpPV0U1VVltdGFWbGxzVm1GV1JscHpWV3hrVTFadFVubFdNakV3VmtVeFJWWnNaRlZpUmxwNldWZDRTMVpXU25OVWJGWlhWbXh2ZWxaVVJtRlhiVlpIV2toU2ExSXpRazlaV0hCR1pXeGtXR1JHWkZaTlYxSklWakZvYzFadFNsaGhSbVJhVmpOU1RGZFdXbmRTVmtwMFpFWmtUbGRGU2toWGExWnJZakZWZDAxVlZsTldSVnBZV1d4b2IyTnNiRlZTYms1WVVtczFlbGxWWkRSV1JrNUdVMnh3V0ZZelVsZFVWbHBMVWpGV2MxWnNVbWhOYkVwYVZsZHdSMWxXVG5OWGEyaHJVMGRTVjFSVlVrZFRiRlpZVGxoa1YyRjZSbGhXTWpGdlYyeGFSbU5HUWxaTlJuQlVXVEl4UjFJeGNFaGlSbWhUWVROQ1RsWnRlR3BrTURGWFZWaHNWMkpIVW1oVmJHUlRWMVpzV0dWRmRHcGlSbkI2VjJ0U1UyRXhXbk5UYkdSWFlsaENSRlpVUmt0ak1XUnpZa2RHVjFZeWFGRldha2w0VW0xV1YxWnVWbXBTYmtKd1ZXMTRkMDVzV2xWUmJYUlVUVlZ3V0ZWdE5WTlZNa3BJWVVaU1YwMUdXa3hVYTFwYVpVWndTVnBHVms1V2JYY3hWbXhrTkdJeFduUlNXR2hVWWtVMVdGbFVTbEpOUmxwWVpVZEdWMVpyV25sV01qRXdWR3hhY2xkVVJsZE5Wa3BRV1ZSR1lWSnJNVlpYYXpsWFlYcFdhRlp0ZEZkVE1EQjRXa1prWVZKWVVsbFZha1poVTJ4cmQxZHRPV2hXYTNCV1ZtMTBVMVl4U2taWGJHaGFaV3RhVUZWcVJrOWtWa3B6Vkcxc1dGSnJjRlpXYTFwcVpVZEtkRlpzWkdGU2JGcFZXVzEwZDFReFduRlJibVJZVm14YU1GcFZZelZoVmtweVlrUmFXbFpYVW5aV2JURkhZMjFLTmxGc1ZtbFNia0pOVmxkd1IxTXlVbGRhU0U1V1lsZG9UMVZyV21GV1ZsbDRXa1JDYUUxRVJrbFZiVFZMVkd4T1NHRkdVbHBpUmtwWVZtcEdWMlJIVGpaU2JFNVRZbXRLU2xaR1dsWk9WbEY0VjJ4V1YySkhlRlpaYTJSVFUwWlpkMWRyZEdwaVZUVktXVEJhYjFZeVZuSlNhbEpYWVd0c05GVXlNVkpsVms1eVlrWlNhVkpVVm5kV1YzaGhaREZrUjFkc2FHeFNNRnBWVkZaV1YwNUdXWGxPVlhSWFRXdFdORmt3WXpWV01rcElZVVpTVjFaRldsUldiWGhoWTFaR2MxUnNUbWxTYmtKaFZqSjBWMVl3TVVkYVNGSlRZbXR3VUZac1VuTmhSbFowVFZaT1ZVMVlRbGxVVmxZd1ZrWlpkMDVWYkdGU1ZuQlFWa2Q0WVdSRk9WVlViR1JZVTBWS1JWWnJVa2RVYlZaWFZtNUthRkpzU2xsVk1GWkxWMnhrV0dWSE9XbE5WVEUwVm0xNFYxVnRTbkpPV0U1WFlsUkdWRlJWV2xOV01rWkdUMWRvYUdWcldtRldWbVEwVmpGa2RGWnVTbXBUU0VKWFZGYzFiMUl4Y0VWVGEzUlVWakJ3U0ZsVlpHOVViVXBZWVVaS1YyRXhjRmhXYWtGNFVqRmFkVk5yTlZkV2JrSjVWbGQ0WVZNeFdYaFhia1pWWWxSc2NsbHJXbk5PVm5CR1drUkNWazFFUm5sWk1GcHZWMjFGZUdOSVdsZGlSMUpJV1hwS1QxTldVbk5YYldob1RVWlplbFl5ZUdGWlYwVjRWMnhrVldKcmNHaFZha3B2VkRGWmQxWnJjR3ROVm5CWlZGVlNSMkV3TVZobFJtaFdUVmRvY2xZd1pFZGpNazVIWWtad1YxSllRbFZXVkVKaFpERmtTRlZyYkZWaVJUVllWbXRXWVZOc1dYbGtSM1JUVFZaS01GVXlkR3RoVmtwR1RsWnNWMkV4V2t4Wk1uaFhZMVpPYzFwSGRGTmlSWEEwVm0weGVrNVdXWGxXYms1WVlsUnNXRmxYZEV0aFJsWTJVVmhrYkZKdVFraFhhMlJ2VlRGYVNHVkljRmhXYkVwUVZsUkdTMVl4Y0VsVGJHUnBWbFp3ZGxadGNFTmtNbFp6Vmxoc1QxWlViRmxaV0hCSFRVWndWbFpzVGxkTlJFWjRWVzEwTUZsV1dYcGhSMmhoVW0xU1RGVnRNVTlTTVZKMFlVVTFWRkpWYkRWV2JYQkhZakpSZUZWWWFGWmlhelZ3VkZSS1UxVldXWGRXYTNSV1RWWndNVmt3V210V1ZscHpZMFpvVjFZelVsQldiRnBMWTJ4YWNWVnNjRmRXYmtKUlYxZDBZVmR0VmtkYVNFNVlZa2hDYjFsVVFsZE9SbHBZWkVkR2EySldXbGxXVjNSaFlURktkVkZzYUZwaVJuQk1XVlZhV21WWFRrWlVhelZUWVhwV1NWWlVTVEZWTWtWNFUyNVdVbUpIYUZaV2JURnZVa1p3U0dWR2NHeFNiRnA1VkRGa01GUnNTa2RYYTJ4WVZteEtVRnBFUm10VFJrNXpZa1pLYVZaV2NGbFhWbVF3V1ZaU1IyTkZXbGhpV0ZKWVZGZDBZVkl4VVhoYVJ6bFZZa1pzTmxsVlpFZFdNa1Y1VkdwU1ZWWldjSEpaZWtaM1VteGtjazVXWkd4aVJuQlpWbXhqZUU1R1NYZE5TR2hoVTBWYVZGbHRjekZYVmxwMFpVaGtiRkpzV2xsVVZtTTFWbXN4YzFkcVFtRlRTRUpJVm1wR1MxZEdVbkZWYkhCc1lUTkNWVmRyVm1GVU1sSlhWbTVPYUZJeWVGbFZiWFIzVGtaYWNsZHRkR3ROVm13MVZsZDBhMWxXVGtaalIyaFdUVVpWZUZsNlJuTmpNVnAxV2tVMVUySklRa3BXUmxwVFVUSkdTRkpxV2xOaWJYaFdXV3RhUzFOR1dYbE5WbVJxWWxWWk1sVlhlSGRVYkVwelZsaG9XRlo2UmpaYVZWcExaRVpXY2xkc1dtbFNia0paVmtaU1IxTXhVbGRYV0d4clVtMVNjRlJXVlhoTk1WSnpWMjFHVmxKc2J6SldiWE0xVm0xS1NHRkdVbFppUm5Cb1ZtcEdkMUpXUm5OVmF6VlhWbXhyZDFacVNqQmlNVkY1VWxob1dHSnNXbE5aVjNSTFZteFNWbHBIT1ZoU2JWSllWakowZDJKR1NuSk9WRVpXWWxob00xWkhNVWRqTVdSeFYyeG9hRTFWY0UxV2JGSkhVekZKZVZOWWNHcFNhM0J2VkZaYWQxZEdXblJPV0dScVRWWktTRlp0ZUZkVk1rVjVWVzVHVlZZelVqTlZNVnBoWkVkU1NFOVdaRmROU0VKaFYxWldiMUl4V25KTlZXUnFVbGRvWVZsc2FHOVVNWEJGVW0xMGFrMVdTbmxVTVZwclZHeEtSMWRyZEZkaVZFSTBWRlZhYzFkR1NuVlZiRkpwWVROQ2VGWlhkRmRrTVd4WFZXeG9UbFpGTlhOWmEyUlRaVVpXZEUxVlpHaE5WWEI1V1RCU1IxWXhTalpTV0dSWFlXdEdORlpxU2s5U2JVWkhZVVprVTFZelVUQldiR2gzVXpGVmVWVnJaRlppYkZwVFdXeGtiMk14YkhKaFJVNVRUVlp3ZWxZeU1YZFVNVnB5VFZSU1ZtSkhhSFpXVkVwTFkyMU9SMVpzY0dsU2JrSk5Wa1pXWVZsWFVrWk9WbXhWWWxkb2IxcFhkRnBrTVdSelZteE9WRTFYVWpCVk1uaHZZV3N3ZVdGSFJscFdSVm96VkZSR1dtUXhaSE5VYlhSWFRVaENTbGRzVm1GaU1WVjRWMnhvYTAwelFsaFdNR2hEVWtaYVJWTnJPV3BOVmxveFZUSjRWMkZXV2tkWGJscFhVbXhhZGxWVVJrdFdNV1J6V2tkR1UxSnJjRkJXUmxwclRVVTFWMVZzWkdoU1ZHeHZWRlphYzA1R1ZYbGtSbVJYWWtad01GWlhOWGRXTURGWFkwVjRWV0pZYUdoWmVrcExVakpHUjFwSGJGZGhNamg1Vm0xMFlWWXhXWGxVV0doVllUSlNWVmxyWkc5aFJsWnhWR3RPVlUxWGVIbFdNalZyWWtaS2MyTkZaRmhoTW1oTVZrZDRTMlJGT1ZWVWJIQm9UV3N4TkZaclpEUlRNV1JYVm01S1YySkhVbGhaYkZwSFRURmFXV05GWkZOaVZscEpWVzEwYTFaWFNsbFJiRkpWVmxkb1JGWXllR0ZrUjFaSVQxWmtUbUV4Y0RWV1JscHZWakpHUjFScldrOVdiWGhoV1ZSS1UyUnNWbFZTYms1cVZtdGFXbGxWV210Vk1ERkhWMWh3VjFJemFGaFdWRVp6Vm1zeFdWWnNXbWhOTW1oWVZtMTBWMWxXVGtkaVJGcFVZWHBzVlZWdGN6Rk5WbHBZWlVjNWFGWXdjRXBWVjNNMVYwWlplbUZIYUZabGEzQlFXWHBHZDFJeFduTldiV2hPVFZWd1VsWnRNWGRSYXpGWFZHNU9XR0pIVW1GYVYzaGhWbXhXZEdWSFJsZGlSbHBaV2tWU1UxWnRSalpTYkdSWFRXcFdlbFp0YzNoalZrcHpVV3hhVGxadVFsRlhhMXBoWVRKTmVWUnJhR3hTYlZKWVZtMTRWMDVHV25OVmEyUlhUV3RzTkZaV2FHdFViRnAwVlc1Q1ZrMUdjR2hXVkVaelpFVXhWVlZ0Y0ZOaVJYQmFWMVJPZDFJeVJuSk5WbWhyWld0d1dGVnFUazVsUm14VlVtMUdhazFYVW5sWmExcFhWR3haZVdGSWJGZE5WbkJvVjFaVk1XTXhXblZXYkdocFVqRktVRlpHWXpGaU1sWlhXa2hLVjJKWVVsVlpiRnBoWld4YVNFNVdUbWxTYTNCYVZsYzFUMVl3TVVoVmJGSlZWbXh3YUZWdGVGZGpiRkp6Vm0xc1YxZEZTVEZXTW5oWFZqSkplRlpZYkZOaWEzQlpXVzEwZDFZeGJGaGtTR1JyWWtaS1dWcFZhRXRpUmxsM1YxUktWbUpVUm5wV2FrRjRVakpPUjJOR2FHbFNiSEI1VmtkMFlXTXhXWGhVYkd4cFVqTm9WRlZ0ZUhkWGJGcFlUVmh3VGxJeFducFhhMmhIVmtkR05sWnVUbGRoYTBwb1ZURmFkMVpzY0VsVWJGcE9Va1ZKTVZacldsTlNNVmw1VTJ4c1ZtSnNjRmRhVjNSSFRrWmFjVk5yT1ZOTlZsb3dXVlZWTVZVeFNuTmpSV1JYWVd0d00xVjZRWGhTTVZKWllVWk9XRkl5YUhaV1YzaFdUVmROZUZkdVJsSmlhelZRVm0xNGQxTkdiRlpYYlhSb1VsUkdSbFZ0TlhOV01ERnhWbTVLV0Zac2NFeFdiWE14VjFaYWMyTkZOVk5pU0VKV1ZtMTRhbVZHVG5SVldHeFZZVEZ3VjFsclduZFhSbEpWVTJ4S1RsWnNjSGhWTW5CVFlWVXhWazFVVmxkaVZGWlVWbFJLUzFOSFJrZFNiR1JPVW01Q2IxWnJaRFJqTWsxNFdraFNVMkpZUWs5V2FrWkxWakZhY2xwRVFrNVNiRVkwVmpGb2ExUXhXbGxSYkdoWFlsUkdUMVJXV21GU2JHUnpXa1prVjJFeGNEVlhiRlpoVXpGU2MxZHNaR3BTUm5CWlZtcE9VMk5zVmpaU2F6bFVVbXMxZVZsVlZURldNV1JHVTJ4U1YxSnRUalJaYWtwVFl6RmtXV0pIZEZOTk1VcFZWa1prTUdReFpFZGlTRXBZWWxSc1dGWnFRbUZsYkd0M1lVVTVWMkpWV25sVmJHaHJXVlphYzJOSVNsZGlSbkJRV1RKNGQxTkhSa1pPVm1oVFZsZDNlbFp0ZUdwa01ERllWVmhvYVZKdFVsVldNR1JUVjFac1dHVklaRmhXYlhoV1ZUSjRUMVpHU25WUmJHeGhVbGRvVUZaVVJtRldWa3B5VjJ4d2FFMVdiM3BXYkZKQ1pVWkplVk5yVmxaaVIyaHZWRlphZDJWV1pGaGpSWFJXVFd4S1NGWlhOVmRWYlVZMllrWnNWbUZyV2t4WlZWcGhaRVUxV1ZwR1pFNWlSVmt3VmpKMFlWWXhXbGhTV0dSUFZucHNWMWxYZEVkT1JsSjBaVWRHVkZJd05VZFVNV1J2VmpGYVJsTlljRmhXUlVwMlZYcEdZVkpyTVZkYVJsSm9ZVE5DV1ZaWGNFOVZNVlpIWWtoU1RsWldjSEpVVjNNeFVqRmFXR1ZIZEdsU01GWTBXV3RTVjFZd01YVlZia1poVmxad2FGbDZTa3BsYlVaSFUyMXNVMkV6UWxWV01XUTBZVEpKZVZSdVRsaFhSMUpaV1ZST1UyTnNiSEphUkZKc1VteHdTVnBGYUd0aFJURlhZMFJHVmxZelFrUldNakZHWlZkR1IxRnNhRmRpU0VKb1YyeFdZVlF5VWxkalJXUnFVbFJXY0Zac1VsTk9iRnB6WVVoa1VrMVdSalJXYlRWVFZURmtTRlZ1UmxaaGEwcG9WbXhhVjJNeFZuTlVhelZPVm14Wk1GWnRNVFJUTWtWM1RWWm9VRlpHV2xkVVZtUnZUVEZhYzFkdGRGTk5WMUl3V1ZWYVYxWXdNSGxoUjJoWVlURktTRmxVU2s1bFIwcEZWMnhPYUdWc1duWldSbEpIVXpGS2MxZHNWbFJoYTBwVlZGWmFkMlZzVlhsT1ZYUlhVakJXTkZrd1dtdFdNa3BaWVVST1YyRXhjRmhXTUdSVFUxWlNkR05HVGs1U2JHdzJWbXRrTkZZeFZYaGlSbHBPVjBaYVYxbFVUbTlXTVZweVZtMUdhbFpzU25wWGExcHJZVzFLVjFkcmNGZGlXR2hZV1ZWa1MxSXlUa2xoUm1SVFlrVndTVlpZY0V0VWJWWklVMnRzVldKR1duQldhMXBoWkd4YWRHTkZUbXROVjFKWVZsWm9iMVp0UlhwVmJVWlhZbGhvV0ZSVVJsZGtSVFZXVkd4a1UwMVdjRFZYVjNSVFZURnNWMU5xV2xOaVJrcG9WV3hhZDJGR1dYaFhhemxxWWxVMVNWbFZXbXRXTVZwMVVWaHdWMkpHU2xCYVJFWk9aVVphV1dKR1pHbGlSWEJZVjFaU1IxTXlTWGhWYkZwV1lrZFNWRlp0TVZObFJsVjVZMFZPVjFKVVJsZFdiWEJUVjBaa1NWRnNhRnBoTWxKSFdsY3hSMUpXU25OYVJrNU9UVVZ3V2xZeFdtdGxiVkY1Vm10a1ZXSnNXbFpaYTJoRFkwWldjMVZzWkU1V2JWSlpWRlpTVTJGdFNsZFhiR3hYWWxoU2VsbFhlRXRYVmxaMVZHeGthR0Y2VmxWV2JGWmhWakZhVjFSdVVtdFNNMEp3Vld4U1YwNVdXbkphUkZKcVRWWmFNRlV5TlZOaVJrbzJZa1pvV21KVVZrUldha1ozVWxaS2NrOVdaR2xTYTNBMVYydFdZV1F4VW5SU1dIQlNZV3h3V1ZscldtRmtiRnB4VW0xMFYwMVZOWGhXTW5ocllWWktjMk5IT1ZkaVZFSTBXV3BHVjFJeFZuTlhiR2hwWWxaS1dsWlhlRk5TTVU1WFdraEtXR0V6VW05V2FrSlhUbXhXV0U1WVpGZE5SRVpZV1RCb1MxWXhTa1pqUlhSaFVrVndURlZ0ZUhkU01VNTBZa2RzV0ZJeVozcFdiWFJoVlRGSmVGUllaRTVYUlRWb1ZXMTRZVlpXV25KWGJVWnFWbXhLVjFkclVsTldSbHAwWlVoc1dsWldjSEpaVlZwTFpFWldjbUZHV2s1aGJGcDVWakZhWVZNeFpFZFdia3BvVW14YVdGWnROVUpsYkZweFVXMUdWMDFYVWtoWk1GWmhZV3hLYzJORk9WWmlSMmhFVlRCYVlXTldTblJTYld4T1ZteFpNVlpYTVRCaE1rWlhWR3RrVkdKR1NtRlpiRkpYVWtac1ZsZHRSbGRXYTFwNVdrVmtNRlV5U2xsaFJteFhUVzVTVkZaVVNrZFdNVTV6WVVkNFUxZEZTbGxXVnpWM1Vtc3hSMkpHWkdGU1dGSnhWRlpXZDAxR1VuTmFSV1JXVFZac00xUlZhR3RXTURGMVVXdDRWMUo2UmxoV2FrWnJaRlpXZEdOR1RrNU5WWEJoVm14a05HSXhSWGxXYms1WFYwZG9XRmxzYUZOVlJsWnhVbXQwYkdKSGVGWldSelZQVm1zeGNsZHViRlpOYWtFeFZtcEtTMlJXUm5WalJsWlhZa2hDVlZaVVFtdFNNRFZ6VW01U2ExSnRVbGxWYWtwdVpXeGFjMVZyWkZkaGVrWllWVEowYTJGVk1IbGxTRXBXWWtkb1ZGWlVSbE5XTVhCSVQxWk9VMkpyU2xsV01uUlhZVEZrUjFOc1ZsZGlSbkJYVm1wT1UwMHhXbGhqTTJoVVZtdGFNVlZ0ZUc5V01sWnlWbGhrVjFJelVuSldWRVphWlVkT1JscEhhRk5oTUhCWlZsZDRZV1F5VmtkYVJtUllZa2RTVlZSWGN6RmxiR1J5VjIxMGFGSnJjSGxVYkdNMVZtMUtWVkpVUWxWV1ZuQllXa1ZWTVZkV2NFZGpSbVJwVW14c05sWnNVa3BOVjBWNFdraEtUbE5IZUhOVmJGcExZVVpXZEUxV1RsUk5XRUpaV2xWb1MySkdXblZSYTJ4YVRVWlZlRmxWVlhoWFZrWlpXa1prYUdFeU9IZFhWbEpDVFZaS2NrNVdaRmhpVjNoVVZtcEdTMVpzWkZoTlZGSnJUVmQ0V0ZZeU5WZGhiRXBZVlc1S1ZWWnRVVEJVVlZwVFZqRndTVnBIYUZOaVNFSmhWbXhhVTFJeFduSk5XRVpUWWtWS1lWWnRNVk5VUmxWNFdrVmtVMVpyY0hwV1YzaHJWRzFHTmxWcVdsZGlSMmd6VlZSR1VtVkdXblZWYkZKb1RXMW9lbFpYY0V0T1JscFhWbTVPVm1KSFVuTlphMXAzVW14VmVVMVlaR2hOUkVaWFZGWlNUMVl4U1hwaFJYaGFWbFpXTkZVeFdrZGtWa3B6VjJzMVUySkhPVFpXTW5SVFVqSk5lVlZyV2s5V2JWSlZXV3hXWVZReFZuRlViVGxQWWtkU2VsWnRNRFZXTURGWVZXeG9WazF1UW1oV2FrcExWMGRXUjFadFJsZE5NVXBaVmtaU1IyRXlUbGRUYmtwaFVtMW9WRmxyVm5aa01XUlZVVzEwVTAxWFVraFZNbmhYVmpGYVJtTkdaRlZXYkhCb1ZqQmFZVlpXVG5Ka1JsSlRZWHBWZUZac1kzaGpNVlYzVFVoc2FGSjZiRmhXYlhoTFVrWldObE5yWkZkTlZrcDRWako0VDFkR1NYaFRibHBYWWxob2FGVjZSbFpsUjBwSlVteEthV0pXU21oV2JUQjRWVEZPVjJKR1dtaFNWMUpaVldwQ2QxTldiRlpXYkU1WFZteHdXRll5TlhkV2JVcFpWRmhvVjAxSFVraFZNR1JMVWpGd1JrNVdaR2xoTUhCTFZtMXdSMVV4VG5KTlZtUlZWMGQ0VjFsdGVFdFdiR3gwWkVkR2FsSnNTbGRXVjNoclZURmFkRlZ1YUZaTmJrSkVWbXRWZUZkSFVrVlViR2hvVFZad2VWZFhkR3RUTVZweVRsVnNhbEpzV2xoV2JYaHpUVEZhV0dWSFJsZE5WMUpZVlcwMVYxWkhTa2hoU0VKV1lXdGFURmxWV2xwbFYwNUdaRVpTVG1KRmNGbFdiR014VlRKR1IxTllaRmhoZW14aFdWUkdkMDFzY0ZaWGJHUlBZa1ZhZVZReFpIZGhSMVp6VjJwV1YySkhVVEJWZWtwSFZtc3hWbUpHU21saE1IQlhWbTEwVjFJd05VZFZiR1JZWW1zMVVGbHJXa3ROVmxwSVRWUlNhRlpzY0hsWk1GWjNWakpLVlZGWWFGZFdSVnBVVldwR1MxZFhTa2RYYldob1RVaENiMVl4V210TlIxRjRWMnRrYVZORmNGaFpiWE14VmtaYWRFMVVRazlpUjFKNVZteG9iMVpyTVZaalJtaFhZa2RvZGxadGMzaGpWbHAxWTBad1RtSnRhRlZYVkVvMFZUSlNSazVXYUdsU2JFcFVXVzEwUzA1R1dYbGxSMFpXVFZac00xUnNhRTloYkVwMFZXMDVWbUpHU25wV1JFWlhaRVUxVmxSc2FGZGlSWEJZVmpGb2QxWXhXa1pOVlZaU1lXeEtWMVJYY0ZkamJHUlhWMnQwV0ZKc1dsWlZWM2gzWVVVeFYyTkVXbGRXZWtZMldsVmFhMVl4U25WVmJXeFRZVE5DVUZaWGVHOVJNVTE0VjFob1ZtRXpRbk5WYlhSelRsWldjMkZIT1doaVJYQjZWVEo0VDFkdFJYaFhiV2hZVm14d1lWcEVSbUZXVmtweVQxZHNWRkpWY0VoV2JGSkhWVEZaZVZOclpGaGliRnBUV1ZSR1lWWXhXbkZVYkU1cllrZFNXRll5TVVkVU1rcEhZMFJHVjFJemFETldSekZIWTJ4a2NtSkdaRk5pUm5CNVZsZHdSMkV4U25KUFZtUnBVbTFTYjFSVVFrdFdiRnBZVFVob1RrMXNXa2hXTW5SclYwZEdObFpyT1ZaaGExcG9WbXBHZDFadFJrWmFSbVJYWWtjNGVWWnRNWHBsUmxsNFYyNU9WR0V4U2xoVmJGcDNVakZ3VmxkdVpGTmlWa3BKV1ZWYVQxUnNUa1pTYWs1WFlUSlJNRmxVUVRGVFJrcDFWV3hPYVZKdVFsVldiWFJoV1ZaYVYxZHVUbGRXUlZweFZtMHhORTFHY0VaaFIzUlZUVlp3ZVZZeWVITlhSMFY0VjJwT1YxWXpUalJWYlhoclpGWmFjMWRyTlZkaVNFSlNWbXhhYTA1SFVuUlZXR3hVWVRGd1YxbHJWbmRYUmxKWVpVVjBWVkpzY0ZoV1YzUlBWVEF4Y21OSWNGZFNNMmhvVmxSR2ExTkdWbk5XYkZaWFZteFdORlp0ZUdGak1EVnpWVzVPVldKR1dsaFphMXB5WlZaYVYxcElaRkpOVm5CWVZUSTFTMVJzV2taT1YyaFdZa1p3WVZSVldtRmpiRnBaWVVaU1YySkdjRFZXUmxwaFdWZEtTRkpZWkdsU1JUVllXVlJHWVdGR1draE5Wa3BzVm14YWVWWXlNVFJWTWtwR1kwWkNWMVpGU21oVmVrWlRZekZrYzJKSGNGTldWRlpRVmxjeE5GTXhUa2RYYTJSb1VqTlNiMVJXVm5kWGJHeFdWMnhrVjFac2NGbFpWVnBUVmpGS2MyTkdhRlZpV0doSVdURmFSMk14V25OVWJXaHNZVEZaTWxacVNqQldNVmwzVGxWa1dHRXhjRTlXYkdRMFZqRnNXV05GWkZkTldFSlpXa1ZXZDJFd01WZGpSV1JYVFc1TmVGbFVRWGhqTVU1eVdrZEdWMVp1UWxWV2EyUTBWREZKZUZSdVNrNVdNRnBWVlRCV1MxSldXbkpXYlVaVFlsWmFTRlpYTlV0V1IwcFdWMnM1Vm1Gck5YWlZNRnBoVWpGa2RFOVdTazVoTVhCWlZsUkdiMk15UlhkTlNHeFdZa2Q0V0Zsc1VrZGtiRnBHVjJ4T2FrMVdjREZXUjNoUFlWWk9SbE5yZEZoV00xSm9Xa1JHV21Rd01WZFhiWEJVVTBWS1dGWkdXbUZaVjBaSFZteFdWR0V5VWxWVmJYaExWMnhyZDFkc1pHaFNNRmt5Vm0wMWExWXhTbk5UYTFKaFVrVndVRmw2UmxOak1XUnpXa2RzV0ZKcmNETldiR1IzVVRKUmQwMVZaRmhpYkVwUVZqQlZNVmRXYkhKYVJrNVVVbXhXTlZSc1pEQlhSMHBXVjI1c1dsWkZOWEpXTUdSSFkyMU9SMVZzY0U1U2JGWTBWbFJHYTFJeFNuSk5WbWhvVWpKb1QxbHRNVkpOUmxwMFpFZEdhVTFyV2pCV1ZtaHZWbFprU0ZWc1dscGhNWEJNV1RGYVUxWldTbkprUmxacFVtNUNZVmRVUWxkVU1WSnpVMjVPVkdFeWFGaFZiVEZ2WTJ4c1ZWSnJkRmhXTUZwSVZtMTRWMVl4V1hsaFJsWlhZVEZ3YUZacVFURmpNVXAxVW14S2FWSnNjRlZYVm1oM1VtMVdjMXBJU2xkaVIxSlFWVzE0ZDFJeFVsZFdiazVYWWxWWk1sVnRlR3RaVmxsNlZXdDBZVkpGV21oVmJYaHJZMnMxV0dSRk5XbFNXRUpKVmpKNFYxbFdWWGhWYms1VllUSlNWVmxZY0ZkWFJsbDNZVVZPVTFKc1NsZFdNbmhQVlRBeFYxTnNjRmhoTWxGM1ZsUkdhMU5IUmtkWGJHUlRZa1p3TWxac1VrZFZNVmw0VjI1R1dHSkZjRzlaVkVKM1ZqRmFXRTFZY0d4U1ZFSTBXVEJXWVZZeVJuTlRiR2hXWWtaS1NGVXllR0ZYUjFKRlZXMW9UbUpHY0RWV1ZFcDZaVVphYzFkcldsaGlSVXBoVm01d1IxUkdhM2xOVlRsVFZteEtlVlJzV2s5WFJrcHlZMFZrVjJKWVFrUldha1pPWkRBMVYxcEhiRk5pVmtwb1YyeGtNRmxXVVhoV2JrNWhVa1pLVlZadGVGZE9WbEpYV1hwV2FGSnNiRE5aTUZwaFZqSktWVlpzUWxkTmJrNDBXa1ZhVTJOV1VuTlhiWGhvVFVoQ1VsWnRjRWRaVmxsNVZXeG9WR0V5YUhOVmJURlRWa1p3V0UxVVVsWldiSEJZVmxkME1HRkZNWEpPV0hCWFVucFdWRlpzWkVabFYxWkhWbXh3YVZkR1NrMVhWRUpoWXpKU1NGWnJXbUZTTW5od1ZXeFNWMWRzWkZoa1J6bHJUV3RXTkZVeWVITmhSa3B6VjJ4YVYySkhVblpXYTFwaFVqRmtjMXBGT1dsU1ZuQTBWbFprTkZZeFZYbFNhbHBUVjBoQ1dWbFVSbUZYUmxKeVYyMUdVMkY2UmxkWmExcGhZVWRXY2xkc2FGaGlSMUYzVlRJeFVtVkdaSEpYYkdob1pXeGFlVlpHWkRSVE1VbDRZMFphV0dKRk5WWlphMVV4VTBaVmVXTjZSbGROVm5CSFZHeGFRMWRyTVVkalJYaFdZV3RhVEZwR1dtdGpNVlowWVVVMVUxSnNjRzlXYlhoaFlXc3hXRlJZYkZOaE1sSlpXVmQ0ZDFkR1dYZGFSazVYVm14d2VsWnNVa2RXUlRGWVZXNW9WbFo2VmxCV1ZFRjRWbXMxVlZGdFJsZFdia0Y2Vm1wQ1lWTXhXbGRYYkd4cFVtMW9XRnBYZEdGT2JGcFhWV3QwVkUxWFVraFdSM2h6WVd4S2MxTnNhRlZXTTJoTVdsWmFZVmRIVGtaa1IyeE9ZWHBGTUZaclpEUlpWMFpIVTJ4c1ZtSnJTbGRaYkZKR1pERlNjMWRzU214U01GcEtWa2Q0ZDFZeVJYaFhXSEJYVm5wQmVGVlVSbFpsUms1MVUyeG9hR0V6UWxoV1JtTXhWVEZXUjFkWWFGaGhNbEp5Vm1wQ2QxTldiRlpYYlhScFVqQndTRll4YUhkV01WcEdWMnhvVjFKRldsQmFSVnBUWkZaT2RHVkdUbWxTV0VKUlZteFNRMWxXVFhoVmJrNVlZa2Q0Y1ZWc1ZURlVNVlowWlVWMFZGSnNjRWhaVldRd1lVVXhWbU5HY0ZwV1ZuQllWbXhhWVZkSFJrZFZiR1JUWWtoQ1dWWkhNVFJTTWs1WFVtNU9WMkpGTlc5YVYzUlhUbXhaZVdSR1pGZE5SRlpJVmpKMFlWUnNXbGhsUm1SYVYwaENTRlpxUm5kWFIxSkdaRVU1VjJKR1dUQldNblJyWkRKRmQwMVdXazVXUlRWWVZXcE9iMVJHYkZkWGF6bFVVakZhU1ZsVldtdGhSMFYzWTBjNVYxSjZSVEJaZWtwUFZqRlNjMVpzU21sV1ZuQlFWbTE0VjJReFduTlhiR1JhWld0YWNWUldaRk5sYkdSeVZtMDVWMkpWY0ZaVmJURkhWakpLVlZKck9XRldWbkF6Vld4YVQyTXhVbk5oUm1ScFVtNUNZVlpyVWtkV01ERklVMnRrV0dKR1dsUlpiWGhoVmpGU1dHTkdaR3hpUjNRMVdsVmFUMkZ0U2tkVGFrSlZZa2RTZGxaSGVFOVNiRTUxWVVaa1YxSlZjRmxYYTFKTFZXMVdTRk5yYkZaaGVteFlXVlJPUTJJeFdrZFdiWFJQVWpGYWVsa3dXbUZoUmtwMFZXeGFWbUZyV21oV2JYaFhWMGRPUmxSc1pGZGhNMEkxVmtaYVUxUXhiRmRUYkdSWVZrVktXRmxVUmxkT1JsVjRWMnhrYW1GNlJsaFdNakUwWVVVeFNHUXpjRmRpV0ZKWVYxWmFVMlJHVmxsaVJscG9UVmhDZWxaWE1UUlRNVkY0Vmxoa1dHRXpVbFpaYTFwM1YyeHJkMVpyT1ZWaVJYQjVWRlpTWVZkdFJYaFhhazVYWWtkU1IxcEVRVEZYVmxwelkwWmtVMVpYT1RaV01WcHJUa1pSZUZOdVVsVmhNbmhvVlcwMVEyTkdXbkpYYlVaWFVteHNOVmt3Vms5aGF6RnlUbFZvVm1KWWFIWlhWbHBMWXpGa2MxVnNWbGRpU0VGNVYyeFdZVmR0VmxoVWExcFFWbXh3VDFsVVNqTmxiR1JZWkVaa1ZrMVhlRmRVVm1oVFZtMUtWV0pHYUZwV00xSm9WbXBHVTFkSFZrWlBWbVJwVW14d05WWnFTWGhOUmxKelUxaHdhRkpXY0ZsV2JYaExWRVpzTmxKcmRGZE5WbkI2V1ZWYVExWXhaRWRUYkZKWFVteHdjbGxxUmt0U01rNUhXa2RHVTFZeFNscFdWM2hUVmpGYWMxWnNhR3RUUjFKWFdWaHdSMU5XY0ZaVmJHUlhUVlZ3V0Zrd1ZUVlpWa3BHWTBaU1ZtSlVSbGhWYWtaWFkyczFWMVZzVG1oTk1FcFJWbTB4TkdJeVVYaFNXR1JPVmxkU1YxbFVTbE5XYkZsM1drWk9hbUpHV25wWlZXTTFWakZhYzFOc1pGcFdWbkJRVm14YVlXTXhaRlZUYkZwWFRUQktSVlp0ZUdGVE1rNXlUVlpXVldKSVFrOVpiWGhMVG14a1dFMVljR3hTYTNBd1ZsZDBZVlp0U2tkalJtaFZWa1Z3VUZSVVJtRldWa3B6V2taYWFWWnJXVEJYVjNCUFl6RlZlVk5yYUdoU2EwcFlXVlJHWVZSR1drZFhiRnByVFZad01WZHJaSE5VYkdSR1UydGtWMVl6YUZSV2FrcEhZekZPV1ZwSGNGTlNWbkJZVm0xd1QxRXhUa2RpUmxaVFlURndjMVp0TlVOVGJGWllaVVpPV0ZKcmJEWlpWVlpUVjBaYWMyTkdhRlZXVm5Cb1ZUQmFTMWRXY0VaUFZtUlhZVE5DZGxacldtcE5WMGw1Vm01T1lWTkZOVmhaYkdoVFZteFNXR1JJWkZSV2JIQkpXa1ZvVDFZeVNrZGlSRlpYVmpOb1dGWnNXbHBsYlVaSVVteFdWMkpJUW5sV2FrSldaVVpLVjFkdVVtaFNhelZQVld0YVYwMHhXblJsUjNST1VqRkdOVlZ0ZUc5V1IwcHlUbFpXV21KWVRYaFhWbHBUVjBkT1IxcEdWbE5pUlhCWlZqSjBWazVXV2tkWGJrNVlZa1p3V0ZSWE5WTlhSbHAwWlVkR1QySlZjRWRhVlZwaFZqRktWMk5JYUZkU00yaHlWbXBLVDJSR1duSmlSbVJwVW14d2RsZFhkR0ZrTWxaSFYydGtWbUV5VWxWVVYzTjRUa1pzY21GRk9WZFdNSEJXVm0wMVExZHRSWGxWV0dSVllrWndNMVp0TVVkVFZuQkhWV3MxYVZKdVFtRldNblJYVm1zMVYxWnVTazVYUmtwWFdXMHhORll4VWxoalJXUldVbXhXTkZZeWN6VmhNVnB5VjJwQ1dtRXlVbnBaVmxwTFZqSk9SVkpzWkZkU1ZuQjVWa1pXWVZkdFVYZE9WbHBvVW1zMWNGVnFUbTlYUmxweFVXeGFUbFpyTVRSV2JUVlBXVlpLTm1KSVFsVldiV2hFVlRGYVUxWXhaSFJTYkhCWFZrVmFXbGRzVm1GV01WcHpWMnBhVWxkSGFHRldiWGhYVGtacmVGcEZkRlJXYXpWNlZsZDRhMVl3TVZaalJscFhUVlp3V0ZsVVJscGxSbVJ5V2taU2FWSXlhSGRXVjNoaFdWWlplRmR1Vm1wVFJUVldWVzE0WVZac1ZuUk5SRlpYVmxSR1JsWnRlSE5XTVVsNlVXeG9WMUpGV21GYVZ6RkhVMVpTYzFkdGFHaE5hbXN5VmpKMFUxSXhVblJWV0doV1lteGFWVmxyV21GaU1WSldWV3hrVGxadFVsbGFSV1F3WVdzeFZrNVljRlpOYmxKWVZsY3hTMk15VGtkV2JIQnBWa1ZWZDFkVVJtRmtNVWw0WTBWYVlWSXpVbFJXYTJRMFdWWmFWMWt6YUdwTmExcElWakZvYzJGR1RraGhSbXhYWWxob2FGa3hXbE5qTVhCR1QxWk9UbUV4V1RKWFYzUmhZVEZaZVZadVVteFNNbWhZV1ZkMFMxWXhVbGRhUlRsWFRXdHdTRmRyWkVkV1JrcFZWbTA1V0ZZemFGaGFSRVpQVmpGV1dXRkdXbWhsYlhob1ZtMHdlRlV4U1hoaE0yUm9VbGRTV1ZWdGVIZE5SbXhXVjJ0T1dHSlZWalJXTWpWM1ZtMUZlVlZyT1dGV2JIQXpWVEJhUzJNeFVuSk9WMnhwVmpKUk1GWnRjRWRaVm14WVUxaG9WMWRIZUZoWmJYUjNZMFpXYzFkcmRHcFdiRXBaVkZaYVQxZHNXbk5pUkU1WFlrWktTRmxYZUdGa1IxWkhZVVpvYUUxdGFGRldNVnByVXpGWmVGUnVUbXBTYkhCWVdsZDRZV1ZXV1hoWGJVWm9UVlZ3TUZaSGRITlZNa3BJWVVab1dtSkhVblpXVmxwclYwZFNSMXBGTlZOaVNFSkpWbGN3TVZVeFVuTlhXR3hzVWxSc1ZsWnNaRkpOUm5CSFYyMTBWMDFYVW5sVU1WcExWRzFHTmxacmNGZFdSV3Q0VlZSR1YyUkdUblZWYlhoVFRVWndXVmRYTURGUk1XUkhZMFZrV0dKWVVuRlVWbHBMVFVaUmVGWlVWbFpOVjFKSVZUSjRZVmRHV25OVGJFSldWa1ZhVEZacVJtRmpNa1pIVVd4a1dGSnJjR0ZXTVZwVFV6RlZlRlJyWkZaaVJuQlpXVzB4VTFkR1ZuUmtSMFpYWWtkNGVWWnROV3RXTVVweVkwaHNXazFHU2xCV01GcGFaVzFHU1ZOc1pHbFdSVnBWVm0xd1MxTXhTWGxUYTJSWFlsZDRXVlZzVm5kT1ZscHpXa2hrVkUxRVZrZFVWbFpyV1ZaT1JrNVdXbHBpUmtwWVdURmFWMk14WkhKa1JscE9Wak5vTkZaV1l6RmhNV1JJVTJ0a1YyRnJOVmRaYTFwTFYwWmFjbGR0UmxkaGVsWmFWbTE0ZDFZeVNrbFJhMmhZWWtkUk1GWkVTbE5UUmxweVdrZHdVMkpYYUZWWFZsSlBVVEExYzFkdVJsUmhhMHBXVkZaV1YwNVdXbGhPVms1WFVqQndlVlV5ZUU5V01rWnlZbnBDVm1WcldsaFdiRnBUWTJzNVdHSkhiRk5OTWs0MVZtMTBhMDVHVVhsVGEyUllZa2Q0VjFsVVNqUlhSbHAxWTBWa2EySkhlRlpWYlhSM1lrWktjMk5FUmxoaE1YQlVWbXBHWVZaV1dsVlRiR1JPWW10S1JWZFljRXRVTVVsNFUyNVdWV0pHV25CV2JGcDNWMVphUjFadFJtdGhla1o2VjJ0YWIyRnNTbGxSYXpsV1lrWktXRnBXV25OamJGcHpWR3hrVTJKSGR6RldiR1I2WlVac1YxZHVUbGhoTTJoV1dXeG9iMDB4Vm5STlZXUlRZbFUxU1ZsclZURmhSMVp6Vm1wT1YySlVRak5hVldSS1pWWktkVk5yTlZoU1ZuQjNWbGQwVjFsV1dsZFZiR1JYVmtWYWMxWnRlSGRUVm5CR1ZsUldhRll3Y0ZkWk1GWjNWbXhhTmxKdWNGcFdiSEJvV2taYVIxZFhTa2RhUms1WFRVUlJkMVp0ZUZOVE1VcDBWbXRvVTFkSVFuRlZiWGhMWWpGc2NsZHVaR3hTYkhCV1ZWY3hSMVV3TVhOVGJuQlhVbTFvZGxaVVJtdFRSbFp6Vm14V1YxWnNWalJXYWtvMFdWWmtSazVXV2xWaVYyaFlXV3RrTTAxR1duUk5XR1JUVFZkU01GWnROVXRoVjFaeVUyMUdXbFpGV2pOVVZFWmFaVVprY2xwR2FGTldSM2hZVmtkNGEySXhXWGROU0doVVlrVmFXRlp0ZUV0VVJteFZVMnMxYTAxRVJrcFphMXBQWVZaSmVtRkdhRmhXTTJoVVdYcEdUbVZHV25WV2JYQlVVbFJXVUZaR1dtdFZNbFp6V2tac2FsSlZOVzlXYkZKSFYxWndWbGR1WkZkTmEzQmFWVmQwVTFkc1dsZGpSWGhWWWxSR1RGVnNXbUZqTVZwelZHMTRhRTFZUWpKV2FrWlRVVEpGZUZSWWFGVmhNbEpaV1cxNFMyTnNWbkZUYlRsWVZteGFlbGRyVWxOVU1rcEhWbXBTVjJKWVRURldhMVY0WTJ4a2NscEdjR2hOYldoRlYxWldWbVZIVWtkV2JsSlRZa2RTVDFWdGVGcE5SbVJZVFZSU2EwMVZjSHBaTUZacldWWktWV0pHVWxWV2JGb3pWVEZhWVZKV1NuUmpSM2hUVFVad1NWWnFSbTlrTWtaSFZHdGFUMVpzY0ZaV2JuQkhWVVpTVlZKc1pFOWlSVnA1VkRGYWExVXlSWGhqUm5CWFRXNVNXRnBFUmxkamF6RldWMjFzVTFKVVZsbFdSbU14WWpKU2MySklSbEpYUjJoVVZGWmpOVTVzYkhKWGJUbG9WakJXTTFrd2FHdFdNVmw2VVd0b1YyRnJSalJXYWtwUFVteGFjMVp0YUU1TlZYQTBWbXhrZDFJeFRYaFViR1JZWW1zMVlWcFhlR0ZXVm14elZtNWtVMDFXVmpWVVZWSlhWMGRLVjFkdWJGVmlSbFV4Vm14a1MxZFdWblZqUmxwb1RWaENVVlpxUW1Ga01VcDBWbXRvYkZKdFVsaFdibkJ2VGxaYWNWTnFRbGROYTJ3MFZrYzFVMVpHWkVoaFNFSldUVVphVEZscVJsTlhSVEZYVkd4V1YySnJTbGxXYlRFd1lUSkZlRmR1VWxaaE1sSlpWakJvUTFKR2JGZGFSVnBzVmpGYVIxWnRlSGRpUjBWNlVXNXNWMkZyYnpCV2JURlNaVVpPZFZadGJGTmlSWEJaVm0xNFUxWXlWbGRYV0doV1lUTlNWVlJYY3pGVFJteFZWRzVPV2xacmNGcFpWV2hQVmpKS1IxZHRhRlZXYkhCaFdrUkdZV1JIVGtaT1ZrNU9VMFZKTVZZeWRGZFpWazE0Vlc1T1ZHSkhlRmRaVkVaaFYwWlNWbGR1WkU1TlYzY3lWVzAxUzJKR1dsVldiR1JWVFZkU00xWlVRWGhUUjFJMlVteGtVMDB4U2pKV2JYQkhZekZaZUZwR2JHaFNiV2h3V1ZSR2QyRkdXa2RhU0dSWFRXeGFlbGt3VmxkV1IwcEdUbFpTVm1KVVFURlViWGhYVjBkU1IxcEdaR2xTYlRoNVYxZDBWMDVHWkVkWGExcFVZbXh3VjFwWGRIZFZSbFYzVjJzNWExWnNjSHBXTW5oclZHMUtSbU5GTVZkTlYxRjNXV3BLU21Rd01WZGFSbWhwVWpKb1VGWnRlR3RWTWs1elYyNVNUMVpWTlZWV2JYaEhUa1pzVmxkck9XaFNiSEI1Vkd4V2MxbFdTbGhVV0doWFlsUkdTRmt5TVU5U01rWklVbXhPYVZORlJqWldiWEJIV1ZaUmVWVnJhRk5oTW1oeVZXMXpNVlF4V25ST1ZVNVBWbXh3VmxWdGVHdFhiRnB5Vm1wV1ZtSllVblpXYkZwclUxWkdjMWRzY0ZkTk1ERTBWMVJDWVZVeFdsZFNibFpoVWpOQ2NGVnNVbGRYUmxweVdrUkNhMDFyV2pCVmJHaHpZa1pLUmxOc2FGVldNMEpZV1ZWYWMxZEZNVlphUm1ScFVsaEJlRlpXWkRSVk1rcElVbXBhVjJGNlJsbFdhazVUWVVac05sSnRkRmROVmxveFZtMTRiMkZXV1hwaFNGcFhZV3RLVjFSV1pGSmxSbHBaWVVaa2FWSlVWbmxYVjNScVRsVXdlR0pJU21oU1ZUVnZWRlpWTVZOc1ZsaE9WWFJYWVhwR1NGWXlOWGRaVmtsNllVaEtWMDFIVWt4Vk1WcFBaRWRPU0dGRk5XbGlWMk41Vm1wS05GWXlTWGhYV0doVlltczFjVlZyV25kVk1XeFZWRzA1VmsxV1NsaFhhMXBQVm14S2RHUjZTbFpOYmxKeVZqQmFZV05zWkhGUmJIQm9UV3hLTmxaclkzaFNiVlpJVTJwYVUySkhVazlaYlhoTFZVWmFSMWR0ZEZOTmJFcElWa2Q0YzJGc1NuSmpSemxhWVRGd00xWkhlR0ZXVmtaelYyczFVMDFWV1RCWFZsSlBZekpHVjFOcVdtbFNlbXhZV1d0a2IxWkdXbk5YYms1WFZtdGFWbFZ0ZUU5Vk1rcFZZWHBHV0dKR1duWlZha1pyWkVaS1dXSkdXbWxpYTBwdlZsZDBWMWxYVm5OalJWcFhWa1phV1ZWcVFtRlRWbXQzV2toT1YwMXJWalJaYTFKVFZqQXhWMU5yVWxwV1JWcExXbFphWVdSV1ZuTlhiV2hPWWxkb1dsWnRNREZrTWsxNFZXeGtXR0pIVWxkWlZFRXhWbXhXZEdSR1pFOVNiWGhYVm0xek5XRldTbk5pUkU1WFRXNW9lbFpzWkV0U01VNXlWV3hhVG1KdGFFaFhhMUpMVkRGS2MxZHVUbUZTYXpWVVZtMDFRMUpzV25OVmEzUlBVbXN4TkZZeU5VOVdNa3BJWVVkb1ZtSlVSbFJXYTFwaFkyeHdTRTlYZEZkaVNFSlpWbXhrTUZReFVYaFRia3BQVjBoQ1dGbHNhRk5oUmxweVdrVjBVMkpGTlhwV1IzaHJZVlprUjFOWWNGZFdla1V3VmtSR2ExTkdUbkpYYkZKcFVteHdkbFpHVmxOV01ERlhXa1pvYTFKNmJHOVVWM1JoVFVaVmVXVkhPV2xTYTNCSFZqSXhiMVp0U2tkV1dHaFdWa1ZhZWxacVJtdGtSVGxYVld4T1YxSnNjR0ZXYkZKTFRVVTFSMVZ1VGxoaE1YQlZXVzE0WVZkR1duRlViRTVxWWtaYWVGVldhRzlWTURGeVkwVm9XbFpXY0ZSWlZscGFaVmRHU1dGR1pGTmlWa1YzVm0xd1MxTXlUWGhYYmxaVllraENjMWxVUm5ka2JHUllaVVphVGxaVVJsaFphMmhMWVVaSmVsVnRPVlZXYkZwNlZHdGFXbVZWTlZaa1JtUlhZVE5DV0ZaSGVGZFZNVnAwVWxoc1ZtRXphRmRVVlZwV1RWWlplRnBGT1ZSU01GcElWMnRrTkdGV1NuUlBWRkpYWWtaS1NGWnFTa3BsUmxwWllrWlNXRkl5YUhoV1Z6RTBVekZWZUdKSVVrNVdhelZ4Vm0weE5HVnNXbGhPVlRsb1RWWndNRnBGVWxkV1ZscHpWMjVLV2xaRldreFdNR1JYVW0xR1IyTkhlR2hsYkZwT1ZtMXdSMWxXV25SVldHeFVZVEZ3VVZadGRIZFVNV3h6VjJ0MFQySkdjRWhXYlRFd1ZUQXhXRlZyWkZWV2JIQjJXV3RhUzFaV1NuVlJiSEJZVTBWS1dWWkhNVFJYYlZaWVZtdG9hMUp0VWs5WmExWmFaV3hrY2xac1pGZE5WbXcwVjJ0V1lWWkhSWGhqUm1oWFlsUkdUMVJXV21GU1ZrcHlWMjE0VjFaRldtRldhMk40WXpGWmVGZFljR2hTVjNoWVZXdFdZV05zWkZkYVJXUllVbXMxZWxZeWVHOWhSMFYzWTBad1dGWXpVbWhaTW5ONFZqRndTVlZ0ZEZSU1ZGWlZWbTE0VTFJeFNuTmlTRXBYWW0xU1YxbFljRWRsYkZWNVRsWk9WMDFFUmtoVk1uUXdXVlphV0ZWcmFGWk5SbkJNV1hwS1IxSnJPVmRhUlRWWVVsVndiMVpxU2pSWlYwVjRWVzVLVGxkRk5WVlpWRXBUVmtac2RHVklaRmRXYlhoNlZqSjBNRlpIU2tkV2FsWmFUVVp3Y2xadGVFdGtWa1pWVTJ4YVYwMHhSWGRXYkdSNlpVWmFjMXBJVm1wU2JrSlBWVzAxUW1Wc1pGVlJiVVpUVFd4S1dWWkhkRzlpUmtwMFlVWlNWMkV4V2xoVWExcGhZMVpLZEZKdGJFNVdWRVV4VmxSSk1WVXhXblJUYmtwUFYwVmFWbFpyVm5ka2JGbDVaVWRHVjFacldubFdNbk0xVmpKS1IyTkZiRmRoTWxGM1ZYcEtSMWRHVG5OYVJsSm9ZVEJ3YUZkV1VrdFZhekZIWWtaV1ZHSkhVbGxWYlhoTFZteFZlV1ZGT1ZaTmExWTBXV3BPYzFZeFdrWmlNMlJYVWtWYVdGcEZXazlqYlVwSFdrZHNXRkpWY0ZGV01WcFRVakpOZDA1V1pHRlNiVkpaV1d4b1UxZEdVbFpWYTA1T1RWaENSMVp0ZUU5aFJrcFZVbXRhVjJKWVVsaFdNR1JIWTIxSmVscEdXbXhoTVhCNVYxaHdSMlF4U2xkV2JsSnFVbXMxY0ZsVVFuWmxiRnB6VjIxd1RsWXhSalZWTW5ScldWWktWMk5GT1ZkaE1WcG9WakZhWVdSRk1WaFBWbFpUWWxobmQxWkdXbUZVTWtaeVRWaEtUbFpHY0dGV2JGcDNaV3hhZEdNemFGTmlSbkJXVlcxNGExWXhXblZSYkVaWFZtMU9ORlY2U2s1bFZrNVpZMGRzVTJKV1NuZFhWM1JoWkRKSmVGZHVSbEppUjFKeVZGZDBjMDVHYTNkV2JVWmFWbXR3ZWxrd2FFTlhiR1JKVVc1d1lWSnNjRlJXYlhoaFkxWkdjMVJzVG1sU2JrSmhWakowVjFZd01VZGFTRkpVWWtaYVdGbHJWa3RaVmxwelYyNWtUbUpJUWxoV01qRkhZVEZhYzJOSWJHRldWbkJNVmtjeFMyTXhUbk5TYkdSWFlrVndUVmRXVWt0VWJWWlhWRzVLYUZKdFVtOVVWekZ2VmpGa1dHVkhPV2xOYXpWWVZteG9hMWRIUlhsVmJrSmFZVEZ3V0ZScldtdFhWMDVHV2tkb1UxWkZXbUZXVm1RMFpERmtjMWRzWkZoaVYyaGhWbTV3UjFSR2EzbE5WVGxUVm1zMWVsa3dWVEZoVjBWM1lrUldWMkpZVW5KVVZWcFNaVlpPZFZWc1RsaFNNVXA0Vmxkd1QxRXhXbGRXYms1b1VsVTFUMVJXWkZOWFZsSldWV3RrVjJKVmNFbFVNVkpQVjIxRmVXRkdRbHBoTVhCUVZXcEdhMk15VGtkWGJXeHBZVEJ3V2xZeFdtRlpWbEYzVGxoT1ZHSkhlR2hWYWtKaFZERmFkRTVWVGxoaVJuQkpXbFZrTUZReFNYZGpSV2hYVWpOU2FGWnJaRXRqYXpWWFlrWmthRTFXVmpSV2JYUmhZekpPYzFwSVZtRlNhelZVV1ZSR2QwNVdXbkZUV0doclRXdGFXVlZzYUhkVmJHUklaVVpzVjJFeFdqTmFWM2hUVmxaS2RWZHRlRk5oZWxZMVYxWldZVlF5UmtoVGEyUnFVMGQ0V0Zsc1VsZE5NVlpWVTJ0MGFrMXJjRVpXTW5oVFZqRktjMk5JYkZkaVdHaHlWR3RhWVZZeFduTmhSVFZYVjBaS1YxWlhlRk5TTVZwelZtNVNUbGRIVWxsWmJGWjNWMnhrZFdORlRscFdhM0I2VmpJMWQxZHRTbGxoUlZKWFlrWldORlZzVlhoU1ZURkZUVVF3UFE9PQ=='
he = base64.b64decode(she)
for _ in xrange(8):
	he = base64.b64decode(he)
exec(he)